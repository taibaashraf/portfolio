var _jsxFileName = "/Users/Lew/react/react-video-looper/src/index.js",
    _this4 = this;

function _templateObject6() {
  var data = _taggedTemplateLiteralLoose(["  \n    text-align: center;\n    width: 100%;\n    z-index:2;\n    div {\n        color: grey;\n        display: inline-block;\n        text-align: left;\n        font-size:5em;\n        font-weight: 100;\n    }\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteralLoose(["\n    color: grey;\n    font-size:1.4em;\n    font-weight: 200;\n    display: ", ";\n    text-align: center;\n    header {\n        display: ", ";\n        width: ", ";\n    }\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteralLoose(["\n    position: absolute;\n    bottom: 2em;\n    right: ", ";\n    width: ", ";\n    font-family: \"Segoe UI\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\", \"Helvetica Neue\", Arial, sans-serif;\n    line-height:1;\n    user-select: none;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n    z-index:1;\n    position: absolute;\n    top: 50%;\n    left: ", ";;\n    transform: translate(-50%, -50%);\n    border: 0;\n    background: transparent;\n    box-sizing: border-box;\n    width: 0;\n    height: 100px;\n    border-color: transparent transparent transparent #d6d6d644;\n    border-style: solid;\n    border-width: 50px 0 50px 75px;\n    opacity: ", ";\n    transition: opacity 0.3s;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n    position:  ", ";\n    object-fit: ", ";\n    object-position: ", ";\n    width: ", ";\n    height: 100%;\n    left:0;\n    opacity: ", ";\n    &.videoClone {\n        filter: ", ";\n    }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  position: relative;\n  top:0;\n  width: ", ";\n  height: ", ";\n  overflow: hidden;\n  background-color: black;\n  cursor: pointer;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

var VideoLooper =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(VideoLooper, _React$Component);

  function VideoLooper(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "togglePlayback", function (e) {
      e && e.preventDefault();
      var currentVideo = _this.state.isVideoCloneActive ? 'videoClone' : 'video';

      if (_this[currentVideo].paused) {
        _this[currentVideo].play();

        _this._frameId = requestAnimationFrame(_this.tick);

        _this.setState({
          isPlaying: true
        });
      } else {
        _this[currentVideo].pause();

        cancelAnimationFrame(_this._frameId);

        _this.setState({
          isPlaying: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "tick", function () {
      _this._frameId = requestAnimationFrame(_this.tick);
      _this.state.isVideoCloneActive ? _this.checkLoopEnd(_this.videoClone, _this.video) : _this.checkLoopEnd(_this.video, _this.videoClone);

      if (_this.props.isDebugMode) {
        _this.setState({
          currentTime: _this.state.isVideoCloneActive ? (Math.round(_this.videoClone.currentTime * 100) / 100).toFixed(2) : (Math.round(_this.video.currentTime * 100) / 100).toFixed(2)
        });
      }
    });

    _this.state = {
      isVideoCloneActive: false,
      currentLoop: 0,
      isPlaying: false,
      currentTime: 0
    };
    return _this;
  }

  var _proto = VideoLooper.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.video.addEventListener('loadeddata', this.onLoadedVideo.bind(this));
    this.videoClone.addEventListener('loadeddata', this.onLoadedVideoClone.bind(this));
    this.video.addEventListener('ended', this.onEndedVideo.bind(this));
    this.videoClone.addEventListener('ended', this.onEndedVideo.bind(this));
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextVideo = this.state.isVideoCloneActive ? 'video' : 'videoClone';

    if (this.props.start !== prevProps.start && this.props.start < this.video.duration) {
      this[nextVideo].currentTime = Number(this.props.start);
    }

    if (this.props.speed !== prevProps.speed) {
      this.video.playbackRate = this.props.speed;
      this.videoClone.playbackRate = this.props.speed;
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    cancelAnimationFrame(this._frameId);
  };

  _proto.onLoadedVideo = function onLoadedVideo() {
    this.video.pause();
    this.props.autoPlay && this.togglePlayback();
    this.video.playbackRate = this.props.speed || 1;
  };

  _proto.onLoadedVideoClone = function onLoadedVideoClone() {
    this.videoClone.pause();
    this.videoClone.currentTime = this.props.start;
    this.videoClone.playbackRate = this.props.speed || 1;
  };

  _proto.checkLoopEnd = function checkLoopEnd(currentVideo, nextVideo) {
    var _this2 = this;

    if (currentVideo.currentTime >= this.props.end && (!this.props.loopCount || this.state.currentLoop < this.props.loopCount)) {
      nextVideo.play();
      this.setState({
        isVideoCloneActive: !this.state.isVideoCloneActive,
        currentLoop: this.state.currentLoop + 1
      }, function () {
        currentVideo.pause();
        setTimeout(function () {
          currentVideo.currentTime = _this2.props.start;
        }, 500);
      });
    }
  };

  _proto.onEndedVideo = function onEndedVideo() {
    cancelAnimationFrame(this._frameId);
    this.setState({
      currentLoop: 0,
      isPlaying: false
    });
  };

  _proto.render = function render() {
    var _this3 = this;

    return (
      /*#__PURE__*/
      React.createElement(VideoContainer, _extends({
        onClick: this.togglePlayback
      }, this.props, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 141,
          columnNumber: 13
        }
      }),
      /*#__PURE__*/
      React.createElement(PlayButton, _extends({}, this.state, this.props, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 142,
          columnNumber: 17
        }
      })),
      /*#__PURE__*/
      React.createElement(Video, _extends({
        ref: function ref(video) {
          _this3.video = video;
        },
        isVisible: true
      }, this.props, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 143,
          columnNumber: 17
        }
      }),
      /*#__PURE__*/
      React.createElement("source", {
        src: this.props.source,
        type: "video/mp4",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 144,
          columnNumber: 21
        }
      })),
      /*#__PURE__*/
      React.createElement(Video, _extends({
        ref: function ref(videoClone) {
          _this3.videoClone = videoClone;
        },
        className: "videoClone",
        isVisible: this.state.isVideoCloneActive
      }, this.props, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 146,
          columnNumber: 17
        }
      }),
      /*#__PURE__*/
      React.createElement("source", {
        src: this.props.source,
        type: "video/mp4",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 147,
          columnNumber: 21
        }
      })), this.props.isDebugMode &&
      /*#__PURE__*/
      React.createElement(Debug, {
        isSplitView: this.props.isSplitView,
        isVideoCloneActive: this.state.isVideoCloneActive,
        currentTime: this.state.currentTime,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 150,
          columnNumber: 21
        }
      }))
    );
  };

  return VideoLooper;
}(React.Component);

_defineProperty(VideoLooper, "defaultProps", {
  speed: 1,
  loopCount: null,
  autoPlay: true,
  muted: true,
  isDebugMode: false,
  isSplitView: false,
  width: '100%',
  height: '100vh',
  objectFit: 'cover',
  objectPosition: '40%'
});

export { VideoLooper as default };
VideoLooper.propTypes = process.env.NODE_ENV !== "production" ? {
  source: PropTypes.string.isRequired,
  start: PropTypes.number.isRequired,
  end: PropTypes.number.isRequired,
  speed: PropTypes.number,
  loopCount: PropTypes.number,
  autoPlay: PropTypes.bool,
  muted: PropTypes.bool,
  isDebugMode: PropTypes.bool,
  isSplitView: PropTypes.bool,
  width: PropTypes.string,
  height: PropTypes.string,
  objectFit: PropTypes.string,
  objectPosition: PropTypes.string
} : {};

var Debug = function Debug(props) {
  return (
    /*#__PURE__*/
    React.createElement(DebugContainer, {
      isSplitView: props.isSplitView,
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 159,
        columnNumber: 9
      }
    },
    /*#__PURE__*/
    React.createElement(DebugHeader, {
      isVisible: !props.isSplitView,
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160,
        columnNumber: 13
      }
    },
    /*#__PURE__*/
    React.createElement("header", {
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 161,
        columnNumber: 17
      }
    }, props.isVideoCloneActive ? 'cloned video' : 'main video')),
    /*#__PURE__*/
    React.createElement(DebugHeader, {
      isVisible: props.isSplitView,
      isSplitView: props.isSplitView,
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 163,
        columnNumber: 13
      }
    },
    /*#__PURE__*/
    React.createElement("header", {
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 164,
        columnNumber: 17
      }
    }, "main video"),
    /*#__PURE__*/
    React.createElement("header", {
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 165,
        columnNumber: 17
      }
    }, "cloned video")),
    /*#__PURE__*/
    React.createElement(DebugData, {
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 167,
        columnNumber: 13
      }
    },
    /*#__PURE__*/
    React.createElement("div", {
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 168,
        columnNumber: 17
      }
    }, props.currentTime)))
  );
};

var VideoContainer = styled.div(_templateObject(), function (props) {
  return props.width;
}, function (props) {
  return props.height;
});
var Video = styled.video(_templateObject2(), function (props) {
  return props.isDebugMode && props.isSplitView ? 'relative' : 'absolute';
}, function (props) {
  return props.objectFit;
}, function (props) {
  return props.objectPosition;
}, function (props) {
  return props.isDebugMode && props.isSplitView ? '50%' : '100%';
}, function (props) {
  return props.isVisible || props.isDebugMode && props.isSplitView ? 1 : 0;
}, function (props) {
  return props.isDebugMode && props.isSplitView ? 'grayscale(100%)' : 'none';
});
var PlayButton = styled.div(_templateObject3(), function (props) {
  return props.isDebugMode && props.isSplitView ? props.isVideoCloneActive ? '75%' : '25%' : '50%';
}, function (props) {
  return props.isPlaying ? 0 : 1;
});
var DebugContainer = styled.div(_templateObject4(), function (props) {
  return props.isSplitView ? '0' : '2em';
}, function (props) {
  return props.isSplitView ? '100%' : 'auto';
});
var DebugHeader = styled.div(_templateObject5(), function (props) {
  return props.isVisible ? 'block' : 'none';
}, function (props) {
  return props.isSplitView ? 'inline-block' : 'block';
}, function (props) {
  return props.isSplitView ? '50%' : '100%';
});
var DebugData = styled.div(_templateObject6());